x-gogs:
  &gogs
  environment:
    - DRONE_SERVER_HOST={{ DRONE_SERVER_HOST }}
    - DRONE_SERVER_PROTO={{ DRONE_SERVER_PROTO }}
    - DRONE_RPC_SECRET=${DRONE_RPC_SECRET}
    #
    - DRONE_GOGS_SERVER={{ DRONE_GOGS_SERVER }}
    - DRONE_GOGS_SKIP_VERIFY=false
    - DRONE_TLS_AUTOCERT=false
    #
    - DRONE_DATABASE_DRIVER={{ DB_TYPE }}
    - DRONE_DATABASE_DATASOURCE={{ DB_USERNAME }}:{{ DB_PASSWORD }}@tcp({{ DB_HOST }})/drone?parseTime=true
    # - DRONE_TLS_KEY=/etc/drone/ssl/${CI_DOMAIN}.key
    # - DRONE_TLS_CERT=/etc/drone/ssl/${CI_DOMAIN}.crt
    - DRONE_USER_CREATE=${DRONE_USER_CREATE}
    - DRONE_USER_FILTER=${DRONE_USER_FILTER:?DRONE_USER_FILTER}

services:
  drone-server:
    << : *gogs
    volumes:
      - ./config/nginx/ssl:/etc/drone/ssl
    ports:
      # - 80:80
      # - 443:443
      - "${CI_HOST:?CI_HOST}:${CI_DRONE_PORT:-8000}:80"
      # - 9000:9000

  # drone-docker-runner:
  #   ports:
  #     # runner dashboard
  #     - 3001:3000

  # mysql:
  #   ports:
  #     - "${CI_HOST:-127.0.0.1}:${CI_MYSQL_PORT:-13306}:3306"
  # redis:
  #   ports:
  #     - "${CI_HOST:-127.0.0.1}:${CI_REDIS_PORT:-16379}:6379"

# networks:
#   backend:
#     external: true
#     name: lnmp_backend
#   frontend:
#     external: true
#     name: lnmp_frontend
