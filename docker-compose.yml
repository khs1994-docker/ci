#
# CI/CD 私有化部署基于端口版
#

version: "3.6"

x-common:
  $default-common
  restart: always
  networks:
    - backend

x-khs1994:
  environment:
    - DRONE_GITHUB=true
    - DRONE_OPEN=${DRONE_OPEN:-false}
    - DRONE_HOST=http://${DRONE_HOST}
    - DRONE_SECRET=${DRONE_SECRET}
    - DRONE_ADMIN=khs1994,khs1994-merge-robot
    - DRONE_HOST=http://khs1994.jios.org:18000
    - DRONE_GITHUB_CLIENT=${DRONE_GITHUB_CLIENT_TEST}
    - DRONE_GITHUB_SECRET=${DRONE_GITHUB_SECRET_TEST}
    - DRONE_DATABASE_DRIVER=mysql
    - DRONE_DATABASE_DATASOURCE=root:mytest@tcp(mysql:3306)/gogs?parseTime=true

x-gogs:
  &gogs
  environment:
    - DRONE_GOGS=true
    - DRONE_OPEN=${DRONE_OPEN:-false}
    - DRONE_HOST=http://${DRONE_HOST}
    - DRONE_SECRET=${DRONE_SECRET}
    - DRONE_GOGS_URL=http://${DRONE_HOST_BASED_PORT:-3000}:3000
    - DRONE_GOGS_PRIVATE_MODE=${DRONE_GOGS_PRIVATE_MODE:-true}

x-github:
  &github
  environment:
    - DRONE_GITHUB=true
    - DRONE_OPEN=${DRONE_OPEN:-false}
    - DRONE_HOST=${DRONE_HOST}
    - DRONE_SECRET=${DRONE_SECRET}
    - DRONE_ADMIN=${DRONE_ADMIN}
    - DRONE_GITHUB_CLIENT=${DRONE_GITHUB_CLIENT_PRO}
    - DRONE_GITHUB_SECRET=${DRONE_GITHUB_SECRET_PRO}

# Don't use this config
x-coding:
  &coding
  environment:
    - DRONE_CODING=true
    - DRONE_OPEN=${DRONE_OPEN:-false}
    - DRONE_HOST=${DRONE_HOST}
    - DRONE_SECRET=${DRONE_SECRET}
    - DRONE_CODING_CLIENT=${DRONE_CODING_CLIENT}
    - DRONE_CODING_SECRET=${DRONE_CODING_SECRET}

x-gitlab:
  &gitlab
  environment:
    - DRONE_GITLAB=true
    - DRONE_OPEN=${DRONE_OPEN:-false}
    - DRONE_HOST=${DRONE_HOST}
    - DRONE_SECRET=${DRONE_SECRET}
    - DRONE_GITLAB_CLIENT=fe548feb7819435d8f7c9236cf4ca30c
    - DRONE_GITLAB_SECRET=232a1ef9dd9148cbbf4034eb40f9736b
    - DRONE_GITLAB_URL=https://git.cloud.tencent.com

services:

  drone-server:
    << : *default-common
    image: drone/drone:${CI_DRONE_VERSION:-0.8.5}
    ports:
      #
      # 如果没启用 https 则内部端口开放的是 8000 不是 80
      #
      # - 80:80
      # - 443:443
      - "${CI_BASED_PORT_DRONE_HOST}:${CI_BASED_PORT_DRONE_PORT:-8000}:8000"
      # - 9000:9000
    volumes:
      - drone-data:/var/lib/drone/:rw
    networks:
      - frontend
      - backend
    << : *gogs
    # << : *github
    # << : *coding

  drone-agent:
    << : *default-common
    image: drone/agent:${CI_DRONE_VERSION:-0.8.5}
    depends_on:
      - drone-server
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:rw
    environment:
      - DRONE_SECRET=${DRONE_SECRET}
      - DRONE_SERVER=drone-server:9000

  gogs:
    << : *default-common
    image: gogs/gogs
    ports:
      - "${CI_BASED_PORT_DRONE_HOST}:${CI_BASED_PORT_GOGS_SSH_PORT}:22"
      - "${CI_BASED_PORT_DRONE_HOST}:${CI_BASED_PORT_GOGS_PORT}:3000"
    networks:
      - frontend
      - backend
    volumes:
      - gogs-data:/data:rw
      - ./gogs/app.port.ini:/data/gogs/conf/app.ini:ro

  registry:
    << : *default-common
    image: registry
    ports:
      - "${CI_BASED_PORT_DRONE_HOST}:${CI_BASED_PORT_REGISTRY_PORT:-5000}:5000"
    networks:
      - frontend
      - backend
    volumes:
      - ./registry/config.port.yml:/etc/docker/registry/config.yml:ro
      - registry-data:/var/lib/registry:rw

  mysql:
    << : *default-common
    image: mysql:{CI_MYSQL_VERSION:-8.0.3}
    env_file: config/mysql.env
    volumes:
      - mysql-data:/var/lib/mysql:rw
    command: ["mysqld","--character-set-server=utf8mb4"]

  redis:
    << : *default-common
    image: redis:${CI_REDIS_VERSION:-4.0.9}-alpine
    volumes:
      - redis-data:/data

  nginx:
    image: nginx:${CI_NGINX_VERSION:-1.13.11}-alpine
    networks:
      - frontend
    env_file: .env
    ports:
      - "443:443"
    volumes:
      - ./config/nginx:/etc/nginx/conf.d

volumes:
  gogs-data:
  redis-data:
  mysql-data:
  drone-data:
  registry-data:

networks:
  backend:
  frontend:
